// Code generated by SQLBoiler 4.12.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package datasource_raw

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Utterance is an object representing the database table.
type Utterance struct {
	ID               []byte      `boil:"id" json:"id" toml:"id" yaml:"id"`
	TurnID           []byte      `boil:"turn_id" json:"turn_id" toml:"turn_id" yaml:"turn_id"`
	SequenceNo       int64       `boil:"sequence_no" json:"sequence_no" toml:"sequence_no" yaml:"sequence_no"`
	IsParalinguistic int64       `boil:"is_paralinguistic" json:"is_paralinguistic" toml:"is_paralinguistic" yaml:"is_paralinguistic"`
	StartTime        null.Int64  `boil:"start_time" json:"start_time,omitempty" toml:"start_time" yaml:"start_time,omitempty"`
	EndTime          null.Int64  `boil:"end_time" json:"end_time,omitempty" toml:"end_time" yaml:"end_time,omitempty"`
	Utterance        null.String `boil:"utterance" json:"utterance,omitempty" toml:"utterance" yaml:"utterance,omitempty"`
	CreatedAt        time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *utteranceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L utteranceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UtteranceColumns = struct {
	ID               string
	TurnID           string
	SequenceNo       string
	IsParalinguistic string
	StartTime        string
	EndTime          string
	Utterance        string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "id",
	TurnID:           "turn_id",
	SequenceNo:       "sequence_no",
	IsParalinguistic: "is_paralinguistic",
	StartTime:        "start_time",
	EndTime:          "end_time",
	Utterance:        "utterance",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

var UtteranceTableColumns = struct {
	ID               string
	TurnID           string
	SequenceNo       string
	IsParalinguistic string
	StartTime        string
	EndTime          string
	Utterance        string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "utterances.id",
	TurnID:           "utterances.turn_id",
	SequenceNo:       "utterances.sequence_no",
	IsParalinguistic: "utterances.is_paralinguistic",
	StartTime:        "utterances.start_time",
	EndTime:          "utterances.end_time",
	Utterance:        "utterances.utterance",
	CreatedAt:        "utterances.created_at",
	UpdatedAt:        "utterances.updated_at",
}

// Generated where

var UtteranceWhere = struct {
	ID               whereHelper__byte
	TurnID           whereHelper__byte
	SequenceNo       whereHelperint64
	IsParalinguistic whereHelperint64
	StartTime        whereHelpernull_Int64
	EndTime          whereHelpernull_Int64
	Utterance        whereHelpernull_String
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
}{
	ID:               whereHelper__byte{field: "\"utterances\".\"id\""},
	TurnID:           whereHelper__byte{field: "\"utterances\".\"turn_id\""},
	SequenceNo:       whereHelperint64{field: "\"utterances\".\"sequence_no\""},
	IsParalinguistic: whereHelperint64{field: "\"utterances\".\"is_paralinguistic\""},
	StartTime:        whereHelpernull_Int64{field: "\"utterances\".\"start_time\""},
	EndTime:          whereHelpernull_Int64{field: "\"utterances\".\"end_time\""},
	Utterance:        whereHelpernull_String{field: "\"utterances\".\"utterance\""},
	CreatedAt:        whereHelpertime_Time{field: "\"utterances\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"utterances\".\"updated_at\""},
}

// UtteranceRels is where relationship names are stored.
var UtteranceRels = struct {
	Turn                   string
	UtteranceFragmentLinks string
	Speakers               string
}{
	Turn:                   "Turn",
	UtteranceFragmentLinks: "UtteranceFragmentLinks",
	Speakers:               "Speakers",
}

// utteranceR is where relationships are stored.
type utteranceR struct {
	Turn                   *Turn                      `boil:"Turn" json:"Turn" toml:"Turn" yaml:"Turn"`
	UtteranceFragmentLinks UtteranceFragmentLinkSlice `boil:"UtteranceFragmentLinks" json:"UtteranceFragmentLinks" toml:"UtteranceFragmentLinks" yaml:"UtteranceFragmentLinks"`
	Speakers               SpeakerSlice               `boil:"Speakers" json:"Speakers" toml:"Speakers" yaml:"Speakers"`
}

// NewStruct creates a new relationship struct
func (*utteranceR) NewStruct() *utteranceR {
	return &utteranceR{}
}

func (r *utteranceR) GetTurn() *Turn {
	if r == nil {
		return nil
	}
	return r.Turn
}

func (r *utteranceR) GetUtteranceFragmentLinks() UtteranceFragmentLinkSlice {
	if r == nil {
		return nil
	}
	return r.UtteranceFragmentLinks
}

func (r *utteranceR) GetSpeakers() SpeakerSlice {
	if r == nil {
		return nil
	}
	return r.Speakers
}

// utteranceL is where Load methods for each relationship are stored.
type utteranceL struct{}

var (
	utteranceAllColumns            = []string{"id", "turn_id", "sequence_no", "is_paralinguistic", "start_time", "end_time", "utterance", "created_at", "updated_at"}
	utteranceColumnsWithoutDefault = []string{"id", "turn_id", "sequence_no", "is_paralinguistic", "created_at", "updated_at"}
	utteranceColumnsWithDefault    = []string{"start_time", "end_time", "utterance"}
	utterancePrimaryKeyColumns     = []string{"id"}
	utteranceGeneratedColumns      = []string{}
)

type (
	// UtteranceSlice is an alias for a slice of pointers to Utterance.
	// This should almost always be used instead of []Utterance.
	UtteranceSlice []*Utterance
	// UtteranceHook is the signature for custom Utterance hook methods
	UtteranceHook func(context.Context, boil.ContextExecutor, *Utterance) error

	utteranceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	utteranceType                 = reflect.TypeOf(&Utterance{})
	utteranceMapping              = queries.MakeStructMapping(utteranceType)
	utterancePrimaryKeyMapping, _ = queries.BindMapping(utteranceType, utteranceMapping, utterancePrimaryKeyColumns)
	utteranceInsertCacheMut       sync.RWMutex
	utteranceInsertCache          = make(map[string]insertCache)
	utteranceUpdateCacheMut       sync.RWMutex
	utteranceUpdateCache          = make(map[string]updateCache)
	utteranceUpsertCacheMut       sync.RWMutex
	utteranceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var utteranceAfterSelectHooks []UtteranceHook

var utteranceBeforeInsertHooks []UtteranceHook
var utteranceAfterInsertHooks []UtteranceHook

var utteranceBeforeUpdateHooks []UtteranceHook
var utteranceAfterUpdateHooks []UtteranceHook

var utteranceBeforeDeleteHooks []UtteranceHook
var utteranceAfterDeleteHooks []UtteranceHook

var utteranceBeforeUpsertHooks []UtteranceHook
var utteranceAfterUpsertHooks []UtteranceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Utterance) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Utterance) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Utterance) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Utterance) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Utterance) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Utterance) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Utterance) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Utterance) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Utterance) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUtteranceHook registers your hook function for all future operations.
func AddUtteranceHook(hookPoint boil.HookPoint, utteranceHook UtteranceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		utteranceAfterSelectHooks = append(utteranceAfterSelectHooks, utteranceHook)
	case boil.BeforeInsertHook:
		utteranceBeforeInsertHooks = append(utteranceBeforeInsertHooks, utteranceHook)
	case boil.AfterInsertHook:
		utteranceAfterInsertHooks = append(utteranceAfterInsertHooks, utteranceHook)
	case boil.BeforeUpdateHook:
		utteranceBeforeUpdateHooks = append(utteranceBeforeUpdateHooks, utteranceHook)
	case boil.AfterUpdateHook:
		utteranceAfterUpdateHooks = append(utteranceAfterUpdateHooks, utteranceHook)
	case boil.BeforeDeleteHook:
		utteranceBeforeDeleteHooks = append(utteranceBeforeDeleteHooks, utteranceHook)
	case boil.AfterDeleteHook:
		utteranceAfterDeleteHooks = append(utteranceAfterDeleteHooks, utteranceHook)
	case boil.BeforeUpsertHook:
		utteranceBeforeUpsertHooks = append(utteranceBeforeUpsertHooks, utteranceHook)
	case boil.AfterUpsertHook:
		utteranceAfterUpsertHooks = append(utteranceAfterUpsertHooks, utteranceHook)
	}
}

// One returns a single utterance record from the query.
func (q utteranceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Utterance, error) {
	o := &Utterance{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "datasource_raw: failed to execute a one query for utterances")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Utterance records from the query.
func (q utteranceQuery) All(ctx context.Context, exec boil.ContextExecutor) (UtteranceSlice, error) {
	var o []*Utterance

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "datasource_raw: failed to assign all query results to Utterance slice")
	}

	if len(utteranceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Utterance records in the query.
func (q utteranceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: failed to count utterances rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q utteranceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "datasource_raw: failed to check if utterances exists")
	}

	return count > 0, nil
}

// Turn pointed to by the foreign key.
func (o *Utterance) Turn(mods ...qm.QueryMod) turnQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TurnID),
	}

	queryMods = append(queryMods, mods...)

	return Turns(queryMods...)
}

// UtteranceFragmentLinks retrieves all the utterance_fragment_link's UtteranceFragmentLinks with an executor.
func (o *Utterance) UtteranceFragmentLinks(mods ...qm.QueryMod) utteranceFragmentLinkQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"utterance_fragment_links\".\"utterance_id\"=?", o.ID),
	)

	return UtteranceFragmentLinks(queryMods...)
}

// Speakers retrieves all the speaker's Speakers with an executor.
func (o *Utterance) Speakers(mods ...qm.QueryMod) speakerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"utterance_speakers\" on \"speakers\".\"id\" = \"utterance_speakers\".\"speaker_id\""),
		qm.Where("\"utterance_speakers\".\"utterance_id\"=?", o.ID),
	)

	return Speakers(queryMods...)
}

// LoadTurn allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (utteranceL) LoadTurn(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUtterance interface{}, mods queries.Applicator) error {
	var slice []*Utterance
	var object *Utterance

	if singular {
		var ok bool
		object, ok = maybeUtterance.(*Utterance)
		if !ok {
			object = new(Utterance)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUtterance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUtterance))
			}
		}
	} else {
		s, ok := maybeUtterance.(*[]*Utterance)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUtterance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUtterance))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &utteranceR{}
		}
		if !queries.IsNil(object.TurnID) {
			args = append(args, object.TurnID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &utteranceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TurnID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TurnID) {
				args = append(args, obj.TurnID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`turns`),
		qm.WhereIn(`turns.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Turn")
	}

	var resultSlice []*Turn
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Turn")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for turns")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for turns")
	}

	if len(utteranceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Turn = foreign
		if foreign.R == nil {
			foreign.R = &turnR{}
		}
		foreign.R.Utterances = append(foreign.R.Utterances, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TurnID, foreign.ID) {
				local.R.Turn = foreign
				if foreign.R == nil {
					foreign.R = &turnR{}
				}
				foreign.R.Utterances = append(foreign.R.Utterances, local)
				break
			}
		}
	}

	return nil
}

// LoadUtteranceFragmentLinks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (utteranceL) LoadUtteranceFragmentLinks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUtterance interface{}, mods queries.Applicator) error {
	var slice []*Utterance
	var object *Utterance

	if singular {
		var ok bool
		object, ok = maybeUtterance.(*Utterance)
		if !ok {
			object = new(Utterance)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUtterance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUtterance))
			}
		}
	} else {
		s, ok := maybeUtterance.(*[]*Utterance)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUtterance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUtterance))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &utteranceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &utteranceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`utterance_fragment_links`),
		qm.WhereIn(`utterance_fragment_links.utterance_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load utterance_fragment_links")
	}

	var resultSlice []*UtteranceFragmentLink
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice utterance_fragment_links")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on utterance_fragment_links")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for utterance_fragment_links")
	}

	if len(utteranceFragmentLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UtteranceFragmentLinks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &utteranceFragmentLinkR{}
			}
			foreign.R.Utterance = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.UtteranceID) {
				local.R.UtteranceFragmentLinks = append(local.R.UtteranceFragmentLinks, foreign)
				if foreign.R == nil {
					foreign.R = &utteranceFragmentLinkR{}
				}
				foreign.R.Utterance = local
				break
			}
		}
	}

	return nil
}

// LoadSpeakers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (utteranceL) LoadSpeakers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUtterance interface{}, mods queries.Applicator) error {
	var slice []*Utterance
	var object *Utterance

	if singular {
		var ok bool
		object, ok = maybeUtterance.(*Utterance)
		if !ok {
			object = new(Utterance)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUtterance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUtterance))
			}
		}
	} else {
		s, ok := maybeUtterance.(*[]*Utterance)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUtterance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUtterance))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &utteranceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &utteranceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"speakers\".\"id\", \"speakers\".\"transcript_name\", \"speakers\".\"name\", \"speakers\".\"created_at\", \"speakers\".\"updated_at\", \"a\".\"utterance_id\""),
		qm.From("\"speakers\""),
		qm.InnerJoin("\"utterance_speakers\" as \"a\" on \"speakers\".\"id\" = \"a\".\"speaker_id\""),
		qm.WhereIn("\"a\".\"utterance_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load speakers")
	}

	var resultSlice []*Speaker

	var localJoinCols [][]byte
	for results.Next() {
		one := new(Speaker)
		var localJoinCol []byte

		err = results.Scan(&one.ID, &one.TranscriptName, &one.Name, &one.CreatedAt, &one.UpdatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for speakers")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice speakers")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on speakers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for speakers")
	}

	if len(speakerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Speakers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &speakerR{}
			}
			foreign.R.Utterances = append(foreign.R.Utterances, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if queries.Equal(local.ID, localJoinCol) {
				local.R.Speakers = append(local.R.Speakers, foreign)
				if foreign.R == nil {
					foreign.R = &speakerR{}
				}
				foreign.R.Utterances = append(foreign.R.Utterances, local)
				break
			}
		}
	}

	return nil
}

// SetTurn of the utterance to the related item.
// Sets o.R.Turn to related.
// Adds o to related.R.Utterances.
func (o *Utterance) SetTurn(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Turn) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"utterances\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"turn_id"}),
		strmangle.WhereClause("\"", "\"", 0, utterancePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TurnID, related.ID)
	if o.R == nil {
		o.R = &utteranceR{
			Turn: related,
		}
	} else {
		o.R.Turn = related
	}

	if related.R == nil {
		related.R = &turnR{
			Utterances: UtteranceSlice{o},
		}
	} else {
		related.R.Utterances = append(related.R.Utterances, o)
	}

	return nil
}

// AddUtteranceFragmentLinks adds the given related objects to the existing relationships
// of the utterance, optionally inserting them as new records.
// Appends related to o.R.UtteranceFragmentLinks.
// Sets related.R.Utterance appropriately.
func (o *Utterance) AddUtteranceFragmentLinks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UtteranceFragmentLink) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UtteranceID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"utterance_fragment_links\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"utterance_id"}),
				strmangle.WhereClause("\"", "\"", 0, utteranceFragmentLinkPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UtteranceID, rel.SequenceNo}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UtteranceID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &utteranceR{
			UtteranceFragmentLinks: related,
		}
	} else {
		o.R.UtteranceFragmentLinks = append(o.R.UtteranceFragmentLinks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &utteranceFragmentLinkR{
				Utterance: o,
			}
		} else {
			rel.R.Utterance = o
		}
	}
	return nil
}

// AddSpeakers adds the given related objects to the existing relationships
// of the utterance, optionally inserting them as new records.
// Appends related to o.R.Speakers.
// Sets related.R.Utterances appropriately.
func (o *Utterance) AddSpeakers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Speaker) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"utterance_speakers\" (\"utterance_id\", \"speaker_id\") values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &utteranceR{
			Speakers: related,
		}
	} else {
		o.R.Speakers = append(o.R.Speakers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &speakerR{
				Utterances: UtteranceSlice{o},
			}
		} else {
			rel.R.Utterances = append(rel.R.Utterances, o)
		}
	}
	return nil
}

// SetSpeakers removes all previously related items of the
// utterance replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Utterances's Speakers accordingly.
// Replaces o.R.Speakers with related.
// Sets related.R.Utterances's Speakers accordingly.
func (o *Utterance) SetSpeakers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Speaker) error {
	query := "delete from \"utterance_speakers\" where \"utterance_id\" = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeSpeakersFromUtterancesSlice(o, related)
	if o.R != nil {
		o.R.Speakers = nil
	}

	return o.AddSpeakers(ctx, exec, insert, related...)
}

// RemoveSpeakers relationships from objects passed in.
// Removes related items from R.Speakers (uses pointer comparison, removal does not keep order)
// Sets related.R.Utterances.
func (o *Utterance) RemoveSpeakers(ctx context.Context, exec boil.ContextExecutor, related ...*Speaker) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"utterance_speakers\" where \"utterance_id\" = ? and \"speaker_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeSpeakersFromUtterancesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Speakers {
			if rel != ri {
				continue
			}

			ln := len(o.R.Speakers)
			if ln > 1 && i < ln-1 {
				o.R.Speakers[i] = o.R.Speakers[ln-1]
			}
			o.R.Speakers = o.R.Speakers[:ln-1]
			break
		}
	}

	return nil
}

func removeSpeakersFromUtterancesSlice(o *Utterance, related []*Speaker) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Utterances {
			if !queries.Equal(o.ID, ri.ID) {
				continue
			}

			ln := len(rel.R.Utterances)
			if ln > 1 && i < ln-1 {
				rel.R.Utterances[i] = rel.R.Utterances[ln-1]
			}
			rel.R.Utterances = rel.R.Utterances[:ln-1]
			break
		}
	}
}

// Utterances retrieves all the records using an executor.
func Utterances(mods ...qm.QueryMod) utteranceQuery {
	mods = append(mods, qm.From("\"utterances\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"utterances\".*"})
	}

	return utteranceQuery{q}
}

// FindUtterance retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUtterance(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*Utterance, error) {
	utteranceObj := &Utterance{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"utterances\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, utteranceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "datasource_raw: unable to select from utterances")
	}

	if err = utteranceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return utteranceObj, err
	}

	return utteranceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Utterance) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("datasource_raw: no utterances provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(utteranceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	utteranceInsertCacheMut.RLock()
	cache, cached := utteranceInsertCache[key]
	utteranceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			utteranceAllColumns,
			utteranceColumnsWithDefault,
			utteranceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(utteranceType, utteranceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(utteranceType, utteranceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"utterances\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"utterances\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "datasource_raw: unable to insert into utterances")
	}

	if !cached {
		utteranceInsertCacheMut.Lock()
		utteranceInsertCache[key] = cache
		utteranceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Utterance.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Utterance) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	utteranceUpdateCacheMut.RLock()
	cache, cached := utteranceUpdateCache[key]
	utteranceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			utteranceAllColumns,
			utterancePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("datasource_raw: unable to update utterances, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"utterances\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, utterancePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(utteranceType, utteranceMapping, append(wl, utterancePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to update utterances row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: failed to get rows affected by update for utterances")
	}

	if !cached {
		utteranceUpdateCacheMut.Lock()
		utteranceUpdateCache[key] = cache
		utteranceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q utteranceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to update all for utterances")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to retrieve rows affected for utterances")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UtteranceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("datasource_raw: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), utterancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"utterances\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, utterancePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to update all in utterance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to retrieve rows affected all in update all utterance")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Utterance) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("datasource_raw: no utterances provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(utteranceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	utteranceUpsertCacheMut.RLock()
	cache, cached := utteranceUpsertCache[key]
	utteranceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			utteranceAllColumns,
			utteranceColumnsWithDefault,
			utteranceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			utteranceAllColumns,
			utterancePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("datasource_raw: unable to upsert utterances, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(utterancePrimaryKeyColumns))
			copy(conflict, utterancePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"utterances\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(utteranceType, utteranceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(utteranceType, utteranceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "datasource_raw: unable to upsert utterances")
	}

	if !cached {
		utteranceUpsertCacheMut.Lock()
		utteranceUpsertCache[key] = cache
		utteranceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Utterance record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Utterance) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("datasource_raw: no Utterance provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), utterancePrimaryKeyMapping)
	sql := "DELETE FROM \"utterances\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to delete from utterances")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: failed to get rows affected by delete for utterances")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q utteranceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("datasource_raw: no utteranceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to delete all from utterances")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: failed to get rows affected by deleteall for utterances")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UtteranceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(utteranceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), utterancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"utterances\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, utterancePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to delete all from utterance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: failed to get rows affected by deleteall for utterances")
	}

	if len(utteranceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Utterance) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUtterance(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UtteranceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UtteranceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), utterancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"utterances\".* FROM \"utterances\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, utterancePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "datasource_raw: unable to reload all in UtteranceSlice")
	}

	*o = slice

	return nil
}

// UtteranceExists checks if the Utterance row exists.
func UtteranceExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"utterances\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "datasource_raw: unable to check if utterances exists")
	}

	return exists, nil
}
