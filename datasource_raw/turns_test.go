// Code generated by SQLBoiler 4.12.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package datasource_raw

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTurns(t *testing.T) {
	t.Parallel()

	query := Turns()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTurnsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Turn{}
	if err = randomize.Struct(seed, o, turnDBTypes, true, turnColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Turns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTurnsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Turn{}
	if err = randomize.Struct(seed, o, turnDBTypes, true, turnColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Turns().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Turns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTurnsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Turn{}
	if err = randomize.Struct(seed, o, turnDBTypes, true, turnColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TurnSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Turns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTurnsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Turn{}
	if err = randomize.Struct(seed, o, turnDBTypes, true, turnColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TurnExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Turn exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TurnExists to return true, but got false.")
	}
}

func testTurnsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Turn{}
	if err = randomize.Struct(seed, o, turnDBTypes, true, turnColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	turnFound, err := FindTurn(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if turnFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTurnsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Turn{}
	if err = randomize.Struct(seed, o, turnDBTypes, true, turnColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Turns().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTurnsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Turn{}
	if err = randomize.Struct(seed, o, turnDBTypes, true, turnColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Turns().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTurnsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	turnOne := &Turn{}
	turnTwo := &Turn{}
	if err = randomize.Struct(seed, turnOne, turnDBTypes, false, turnColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}
	if err = randomize.Struct(seed, turnTwo, turnDBTypes, false, turnColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = turnOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = turnTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Turns().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTurnsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	turnOne := &Turn{}
	turnTwo := &Turn{}
	if err = randomize.Struct(seed, turnOne, turnDBTypes, false, turnColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}
	if err = randomize.Struct(seed, turnTwo, turnDBTypes, false, turnColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = turnOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = turnTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Turns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func turnBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Turn) error {
	*o = Turn{}
	return nil
}

func turnAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Turn) error {
	*o = Turn{}
	return nil
}

func turnAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Turn) error {
	*o = Turn{}
	return nil
}

func turnBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Turn) error {
	*o = Turn{}
	return nil
}

func turnAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Turn) error {
	*o = Turn{}
	return nil
}

func turnBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Turn) error {
	*o = Turn{}
	return nil
}

func turnAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Turn) error {
	*o = Turn{}
	return nil
}

func turnBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Turn) error {
	*o = Turn{}
	return nil
}

func turnAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Turn) error {
	*o = Turn{}
	return nil
}

func testTurnsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Turn{}
	o := &Turn{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, turnDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Turn object: %s", err)
	}

	AddTurnHook(boil.BeforeInsertHook, turnBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	turnBeforeInsertHooks = []TurnHook{}

	AddTurnHook(boil.AfterInsertHook, turnAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	turnAfterInsertHooks = []TurnHook{}

	AddTurnHook(boil.AfterSelectHook, turnAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	turnAfterSelectHooks = []TurnHook{}

	AddTurnHook(boil.BeforeUpdateHook, turnBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	turnBeforeUpdateHooks = []TurnHook{}

	AddTurnHook(boil.AfterUpdateHook, turnAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	turnAfterUpdateHooks = []TurnHook{}

	AddTurnHook(boil.BeforeDeleteHook, turnBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	turnBeforeDeleteHooks = []TurnHook{}

	AddTurnHook(boil.AfterDeleteHook, turnAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	turnAfterDeleteHooks = []TurnHook{}

	AddTurnHook(boil.BeforeUpsertHook, turnBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	turnBeforeUpsertHooks = []TurnHook{}

	AddTurnHook(boil.AfterUpsertHook, turnAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	turnAfterUpsertHooks = []TurnHook{}
}

func testTurnsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Turn{}
	if err = randomize.Struct(seed, o, turnDBTypes, true, turnColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Turns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTurnsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Turn{}
	if err = randomize.Struct(seed, o, turnDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(turnColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Turns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTurnToManyUtterances(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Turn
	var b, c Utterance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, turnDBTypes, true, turnColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, utteranceDBTypes, false, utteranceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, utteranceDBTypes, false, utteranceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TurnID = a.ID
	c.TurnID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Utterances().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TurnID == b.TurnID {
			bFound = true
		}
		if v.TurnID == c.TurnID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TurnSlice{&a}
	if err = a.L.LoadUtterances(ctx, tx, false, (*[]*Turn)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Utterances); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Utterances = nil
	if err = a.L.LoadUtterances(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Utterances); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTurnToManyAddOpUtterances(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Turn
	var b, c, d, e Utterance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, turnDBTypes, false, strmangle.SetComplement(turnPrimaryKeyColumns, turnColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Utterance{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, utteranceDBTypes, false, strmangle.SetComplement(utterancePrimaryKeyColumns, utteranceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Utterance{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUtterances(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TurnID {
			t.Error("foreign key was wrong value", a.ID, first.TurnID)
		}
		if a.ID != second.TurnID {
			t.Error("foreign key was wrong value", a.ID, second.TurnID)
		}

		if first.R.Turn != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Turn != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Utterances[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Utterances[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Utterances().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTurnToOneEpisodeUsingEpisode(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Turn
	var foreign Episode

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, turnDBTypes, false, turnColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, episodeDBTypes, false, episodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.EpisodeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Episode().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TurnSlice{&local}
	if err = local.L.LoadEpisode(ctx, tx, false, (*[]*Turn)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Episode == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Episode = nil
	if err = local.L.LoadEpisode(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Episode == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTurnToOneSetOpEpisodeUsingEpisode(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Turn
	var b, c Episode

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, turnDBTypes, false, strmangle.SetComplement(turnPrimaryKeyColumns, turnColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, episodeDBTypes, false, strmangle.SetComplement(episodePrimaryKeyColumns, episodeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, episodeDBTypes, false, strmangle.SetComplement(episodePrimaryKeyColumns, episodeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Episode{&b, &c} {
		err = a.SetEpisode(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Episode != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Turns[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.EpisodeID != x.ID {
			t.Error("foreign key was wrong value", a.EpisodeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EpisodeID))
		reflect.Indirect(reflect.ValueOf(&a.EpisodeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.EpisodeID != x.ID {
			t.Error("foreign key was wrong value", a.EpisodeID, x.ID)
		}
	}
}

func testTurnsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Turn{}
	if err = randomize.Struct(seed, o, turnDBTypes, true, turnColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTurnsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Turn{}
	if err = randomize.Struct(seed, o, turnDBTypes, true, turnColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TurnSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTurnsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Turn{}
	if err = randomize.Struct(seed, o, turnDBTypes, true, turnColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Turns().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	turnDBTypes = map[string]string{`ID`: `uuid`, `EpisodeID`: `uuid`, `SequenceNo`: `integer`, `StartTime`: `integer`, `EndTime`: `integer`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_           = bytes.MinRead
)

func testTurnsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(turnPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(turnAllColumns) == len(turnPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Turn{}
	if err = randomize.Struct(seed, o, turnDBTypes, true, turnColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Turns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, turnDBTypes, true, turnPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTurnsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(turnAllColumns) == len(turnPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Turn{}
	if err = randomize.Struct(seed, o, turnDBTypes, true, turnColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Turns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, turnDBTypes, true, turnPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(turnAllColumns, turnPrimaryKeyColumns) {
		fields = turnAllColumns
	} else {
		fields = strmangle.SetComplement(
			turnAllColumns,
			turnPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TurnSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTurnsUpsert(t *testing.T) {
	t.Parallel()

	if len(turnAllColumns) == len(turnPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Turn{}
	if err = randomize.Struct(seed, &o, turnDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Turn: %s", err)
	}

	count, err := Turns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, turnDBTypes, false, turnPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Turn struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Turn: %s", err)
	}

	count, err = Turns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
