// Code generated by SQLBoiler 4.12.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package datasource_raw

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UtteranceFragmentLink is an object representing the database table.
type UtteranceFragmentLink struct {
	UtteranceID         []byte    `boil:"utterance_id" json:"utterance_id" toml:"utterance_id" yaml:"utterance_id"`
	SequenceNo          int64     `boil:"sequence_no" json:"sequence_no" toml:"sequence_no" yaml:"sequence_no"`
	UtteranceFragmentID []byte    `boil:"utterance_fragment_id" json:"utterance_fragment_id" toml:"utterance_fragment_id" yaml:"utterance_fragment_id"`
	CreatedAt           time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt           time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *utteranceFragmentLinkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L utteranceFragmentLinkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UtteranceFragmentLinkColumns = struct {
	UtteranceID         string
	SequenceNo          string
	UtteranceFragmentID string
	CreatedAt           string
	UpdatedAt           string
}{
	UtteranceID:         "utterance_id",
	SequenceNo:          "sequence_no",
	UtteranceFragmentID: "utterance_fragment_id",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
}

var UtteranceFragmentLinkTableColumns = struct {
	UtteranceID         string
	SequenceNo          string
	UtteranceFragmentID string
	CreatedAt           string
	UpdatedAt           string
}{
	UtteranceID:         "utterance_fragment_links.utterance_id",
	SequenceNo:          "utterance_fragment_links.sequence_no",
	UtteranceFragmentID: "utterance_fragment_links.utterance_fragment_id",
	CreatedAt:           "utterance_fragment_links.created_at",
	UpdatedAt:           "utterance_fragment_links.updated_at",
}

// Generated where

var UtteranceFragmentLinkWhere = struct {
	UtteranceID         whereHelper__byte
	SequenceNo          whereHelperint64
	UtteranceFragmentID whereHelper__byte
	CreatedAt           whereHelpertime_Time
	UpdatedAt           whereHelpertime_Time
}{
	UtteranceID:         whereHelper__byte{field: "\"utterance_fragment_links\".\"utterance_id\""},
	SequenceNo:          whereHelperint64{field: "\"utterance_fragment_links\".\"sequence_no\""},
	UtteranceFragmentID: whereHelper__byte{field: "\"utterance_fragment_links\".\"utterance_fragment_id\""},
	CreatedAt:           whereHelpertime_Time{field: "\"utterance_fragment_links\".\"created_at\""},
	UpdatedAt:           whereHelpertime_Time{field: "\"utterance_fragment_links\".\"updated_at\""},
}

// UtteranceFragmentLinkRels is where relationship names are stored.
var UtteranceFragmentLinkRels = struct {
	UtteranceFragment string
	Utterance         string
}{
	UtteranceFragment: "UtteranceFragment",
	Utterance:         "Utterance",
}

// utteranceFragmentLinkR is where relationships are stored.
type utteranceFragmentLinkR struct {
	UtteranceFragment *UtteranceFragment `boil:"UtteranceFragment" json:"UtteranceFragment" toml:"UtteranceFragment" yaml:"UtteranceFragment"`
	Utterance         *Utterance         `boil:"Utterance" json:"Utterance" toml:"Utterance" yaml:"Utterance"`
}

// NewStruct creates a new relationship struct
func (*utteranceFragmentLinkR) NewStruct() *utteranceFragmentLinkR {
	return &utteranceFragmentLinkR{}
}

func (r *utteranceFragmentLinkR) GetUtteranceFragment() *UtteranceFragment {
	if r == nil {
		return nil
	}
	return r.UtteranceFragment
}

func (r *utteranceFragmentLinkR) GetUtterance() *Utterance {
	if r == nil {
		return nil
	}
	return r.Utterance
}

// utteranceFragmentLinkL is where Load methods for each relationship are stored.
type utteranceFragmentLinkL struct{}

var (
	utteranceFragmentLinkAllColumns            = []string{"utterance_id", "sequence_no", "utterance_fragment_id", "created_at", "updated_at"}
	utteranceFragmentLinkColumnsWithoutDefault = []string{"utterance_id", "sequence_no", "utterance_fragment_id", "created_at", "updated_at"}
	utteranceFragmentLinkColumnsWithDefault    = []string{}
	utteranceFragmentLinkPrimaryKeyColumns     = []string{"utterance_id", "sequence_no"}
	utteranceFragmentLinkGeneratedColumns      = []string{}
)

type (
	// UtteranceFragmentLinkSlice is an alias for a slice of pointers to UtteranceFragmentLink.
	// This should almost always be used instead of []UtteranceFragmentLink.
	UtteranceFragmentLinkSlice []*UtteranceFragmentLink
	// UtteranceFragmentLinkHook is the signature for custom UtteranceFragmentLink hook methods
	UtteranceFragmentLinkHook func(context.Context, boil.ContextExecutor, *UtteranceFragmentLink) error

	utteranceFragmentLinkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	utteranceFragmentLinkType                 = reflect.TypeOf(&UtteranceFragmentLink{})
	utteranceFragmentLinkMapping              = queries.MakeStructMapping(utteranceFragmentLinkType)
	utteranceFragmentLinkPrimaryKeyMapping, _ = queries.BindMapping(utteranceFragmentLinkType, utteranceFragmentLinkMapping, utteranceFragmentLinkPrimaryKeyColumns)
	utteranceFragmentLinkInsertCacheMut       sync.RWMutex
	utteranceFragmentLinkInsertCache          = make(map[string]insertCache)
	utteranceFragmentLinkUpdateCacheMut       sync.RWMutex
	utteranceFragmentLinkUpdateCache          = make(map[string]updateCache)
	utteranceFragmentLinkUpsertCacheMut       sync.RWMutex
	utteranceFragmentLinkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var utteranceFragmentLinkAfterSelectHooks []UtteranceFragmentLinkHook

var utteranceFragmentLinkBeforeInsertHooks []UtteranceFragmentLinkHook
var utteranceFragmentLinkAfterInsertHooks []UtteranceFragmentLinkHook

var utteranceFragmentLinkBeforeUpdateHooks []UtteranceFragmentLinkHook
var utteranceFragmentLinkAfterUpdateHooks []UtteranceFragmentLinkHook

var utteranceFragmentLinkBeforeDeleteHooks []UtteranceFragmentLinkHook
var utteranceFragmentLinkAfterDeleteHooks []UtteranceFragmentLinkHook

var utteranceFragmentLinkBeforeUpsertHooks []UtteranceFragmentLinkHook
var utteranceFragmentLinkAfterUpsertHooks []UtteranceFragmentLinkHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UtteranceFragmentLink) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceFragmentLinkAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UtteranceFragmentLink) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceFragmentLinkBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UtteranceFragmentLink) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceFragmentLinkAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UtteranceFragmentLink) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceFragmentLinkBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UtteranceFragmentLink) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceFragmentLinkAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UtteranceFragmentLink) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceFragmentLinkBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UtteranceFragmentLink) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceFragmentLinkAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UtteranceFragmentLink) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceFragmentLinkBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UtteranceFragmentLink) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceFragmentLinkAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUtteranceFragmentLinkHook registers your hook function for all future operations.
func AddUtteranceFragmentLinkHook(hookPoint boil.HookPoint, utteranceFragmentLinkHook UtteranceFragmentLinkHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		utteranceFragmentLinkAfterSelectHooks = append(utteranceFragmentLinkAfterSelectHooks, utteranceFragmentLinkHook)
	case boil.BeforeInsertHook:
		utteranceFragmentLinkBeforeInsertHooks = append(utteranceFragmentLinkBeforeInsertHooks, utteranceFragmentLinkHook)
	case boil.AfterInsertHook:
		utteranceFragmentLinkAfterInsertHooks = append(utteranceFragmentLinkAfterInsertHooks, utteranceFragmentLinkHook)
	case boil.BeforeUpdateHook:
		utteranceFragmentLinkBeforeUpdateHooks = append(utteranceFragmentLinkBeforeUpdateHooks, utteranceFragmentLinkHook)
	case boil.AfterUpdateHook:
		utteranceFragmentLinkAfterUpdateHooks = append(utteranceFragmentLinkAfterUpdateHooks, utteranceFragmentLinkHook)
	case boil.BeforeDeleteHook:
		utteranceFragmentLinkBeforeDeleteHooks = append(utteranceFragmentLinkBeforeDeleteHooks, utteranceFragmentLinkHook)
	case boil.AfterDeleteHook:
		utteranceFragmentLinkAfterDeleteHooks = append(utteranceFragmentLinkAfterDeleteHooks, utteranceFragmentLinkHook)
	case boil.BeforeUpsertHook:
		utteranceFragmentLinkBeforeUpsertHooks = append(utteranceFragmentLinkBeforeUpsertHooks, utteranceFragmentLinkHook)
	case boil.AfterUpsertHook:
		utteranceFragmentLinkAfterUpsertHooks = append(utteranceFragmentLinkAfterUpsertHooks, utteranceFragmentLinkHook)
	}
}

// One returns a single utteranceFragmentLink record from the query.
func (q utteranceFragmentLinkQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UtteranceFragmentLink, error) {
	o := &UtteranceFragmentLink{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "datasource_raw: failed to execute a one query for utterance_fragment_links")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UtteranceFragmentLink records from the query.
func (q utteranceFragmentLinkQuery) All(ctx context.Context, exec boil.ContextExecutor) (UtteranceFragmentLinkSlice, error) {
	var o []*UtteranceFragmentLink

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "datasource_raw: failed to assign all query results to UtteranceFragmentLink slice")
	}

	if len(utteranceFragmentLinkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UtteranceFragmentLink records in the query.
func (q utteranceFragmentLinkQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: failed to count utterance_fragment_links rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q utteranceFragmentLinkQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "datasource_raw: failed to check if utterance_fragment_links exists")
	}

	return count > 0, nil
}

// UtteranceFragment pointed to by the foreign key.
func (o *UtteranceFragmentLink) UtteranceFragment(mods ...qm.QueryMod) utteranceFragmentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UtteranceFragmentID),
	}

	queryMods = append(queryMods, mods...)

	return UtteranceFragments(queryMods...)
}

// Utterance pointed to by the foreign key.
func (o *UtteranceFragmentLink) Utterance(mods ...qm.QueryMod) utteranceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UtteranceID),
	}

	queryMods = append(queryMods, mods...)

	return Utterances(queryMods...)
}

// LoadUtteranceFragment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (utteranceFragmentLinkL) LoadUtteranceFragment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUtteranceFragmentLink interface{}, mods queries.Applicator) error {
	var slice []*UtteranceFragmentLink
	var object *UtteranceFragmentLink

	if singular {
		var ok bool
		object, ok = maybeUtteranceFragmentLink.(*UtteranceFragmentLink)
		if !ok {
			object = new(UtteranceFragmentLink)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUtteranceFragmentLink)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUtteranceFragmentLink))
			}
		}
	} else {
		s, ok := maybeUtteranceFragmentLink.(*[]*UtteranceFragmentLink)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUtteranceFragmentLink)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUtteranceFragmentLink))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &utteranceFragmentLinkR{}
		}
		if !queries.IsNil(object.UtteranceFragmentID) {
			args = append(args, object.UtteranceFragmentID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &utteranceFragmentLinkR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UtteranceFragmentID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UtteranceFragmentID) {
				args = append(args, obj.UtteranceFragmentID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`utterance_fragments`),
		qm.WhereIn(`utterance_fragments.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UtteranceFragment")
	}

	var resultSlice []*UtteranceFragment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UtteranceFragment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for utterance_fragments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for utterance_fragments")
	}

	if len(utteranceFragmentLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UtteranceFragment = foreign
		if foreign.R == nil {
			foreign.R = &utteranceFragmentR{}
		}
		foreign.R.UtteranceFragmentLinks = append(foreign.R.UtteranceFragmentLinks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UtteranceFragmentID, foreign.ID) {
				local.R.UtteranceFragment = foreign
				if foreign.R == nil {
					foreign.R = &utteranceFragmentR{}
				}
				foreign.R.UtteranceFragmentLinks = append(foreign.R.UtteranceFragmentLinks, local)
				break
			}
		}
	}

	return nil
}

// LoadUtterance allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (utteranceFragmentLinkL) LoadUtterance(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUtteranceFragmentLink interface{}, mods queries.Applicator) error {
	var slice []*UtteranceFragmentLink
	var object *UtteranceFragmentLink

	if singular {
		var ok bool
		object, ok = maybeUtteranceFragmentLink.(*UtteranceFragmentLink)
		if !ok {
			object = new(UtteranceFragmentLink)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUtteranceFragmentLink)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUtteranceFragmentLink))
			}
		}
	} else {
		s, ok := maybeUtteranceFragmentLink.(*[]*UtteranceFragmentLink)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUtteranceFragmentLink)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUtteranceFragmentLink))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &utteranceFragmentLinkR{}
		}
		if !queries.IsNil(object.UtteranceID) {
			args = append(args, object.UtteranceID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &utteranceFragmentLinkR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UtteranceID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UtteranceID) {
				args = append(args, obj.UtteranceID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`utterances`),
		qm.WhereIn(`utterances.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Utterance")
	}

	var resultSlice []*Utterance
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Utterance")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for utterances")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for utterances")
	}

	if len(utteranceFragmentLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Utterance = foreign
		if foreign.R == nil {
			foreign.R = &utteranceR{}
		}
		foreign.R.UtteranceFragmentLinks = append(foreign.R.UtteranceFragmentLinks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UtteranceID, foreign.ID) {
				local.R.Utterance = foreign
				if foreign.R == nil {
					foreign.R = &utteranceR{}
				}
				foreign.R.UtteranceFragmentLinks = append(foreign.R.UtteranceFragmentLinks, local)
				break
			}
		}
	}

	return nil
}

// SetUtteranceFragment of the utteranceFragmentLink to the related item.
// Sets o.R.UtteranceFragment to related.
// Adds o to related.R.UtteranceFragmentLinks.
func (o *UtteranceFragmentLink) SetUtteranceFragment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UtteranceFragment) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"utterance_fragment_links\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"utterance_fragment_id"}),
		strmangle.WhereClause("\"", "\"", 0, utteranceFragmentLinkPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UtteranceID, o.SequenceNo}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UtteranceFragmentID, related.ID)
	if o.R == nil {
		o.R = &utteranceFragmentLinkR{
			UtteranceFragment: related,
		}
	} else {
		o.R.UtteranceFragment = related
	}

	if related.R == nil {
		related.R = &utteranceFragmentR{
			UtteranceFragmentLinks: UtteranceFragmentLinkSlice{o},
		}
	} else {
		related.R.UtteranceFragmentLinks = append(related.R.UtteranceFragmentLinks, o)
	}

	return nil
}

// SetUtterance of the utteranceFragmentLink to the related item.
// Sets o.R.Utterance to related.
// Adds o to related.R.UtteranceFragmentLinks.
func (o *UtteranceFragmentLink) SetUtterance(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Utterance) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"utterance_fragment_links\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"utterance_id"}),
		strmangle.WhereClause("\"", "\"", 0, utteranceFragmentLinkPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UtteranceID, o.SequenceNo}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UtteranceID, related.ID)
	if o.R == nil {
		o.R = &utteranceFragmentLinkR{
			Utterance: related,
		}
	} else {
		o.R.Utterance = related
	}

	if related.R == nil {
		related.R = &utteranceR{
			UtteranceFragmentLinks: UtteranceFragmentLinkSlice{o},
		}
	} else {
		related.R.UtteranceFragmentLinks = append(related.R.UtteranceFragmentLinks, o)
	}

	return nil
}

// UtteranceFragmentLinks retrieves all the records using an executor.
func UtteranceFragmentLinks(mods ...qm.QueryMod) utteranceFragmentLinkQuery {
	mods = append(mods, qm.From("\"utterance_fragment_links\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"utterance_fragment_links\".*"})
	}

	return utteranceFragmentLinkQuery{q}
}

// FindUtteranceFragmentLink retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUtteranceFragmentLink(ctx context.Context, exec boil.ContextExecutor, utteranceID []byte, sequenceNo int64, selectCols ...string) (*UtteranceFragmentLink, error) {
	utteranceFragmentLinkObj := &UtteranceFragmentLink{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"utterance_fragment_links\" where \"utterance_id\"=? AND \"sequence_no\"=?", sel,
	)

	q := queries.Raw(query, utteranceID, sequenceNo)

	err := q.Bind(ctx, exec, utteranceFragmentLinkObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "datasource_raw: unable to select from utterance_fragment_links")
	}

	if err = utteranceFragmentLinkObj.doAfterSelectHooks(ctx, exec); err != nil {
		return utteranceFragmentLinkObj, err
	}

	return utteranceFragmentLinkObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UtteranceFragmentLink) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("datasource_raw: no utterance_fragment_links provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(utteranceFragmentLinkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	utteranceFragmentLinkInsertCacheMut.RLock()
	cache, cached := utteranceFragmentLinkInsertCache[key]
	utteranceFragmentLinkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			utteranceFragmentLinkAllColumns,
			utteranceFragmentLinkColumnsWithDefault,
			utteranceFragmentLinkColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(utteranceFragmentLinkType, utteranceFragmentLinkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(utteranceFragmentLinkType, utteranceFragmentLinkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"utterance_fragment_links\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"utterance_fragment_links\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "datasource_raw: unable to insert into utterance_fragment_links")
	}

	if !cached {
		utteranceFragmentLinkInsertCacheMut.Lock()
		utteranceFragmentLinkInsertCache[key] = cache
		utteranceFragmentLinkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UtteranceFragmentLink.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UtteranceFragmentLink) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	utteranceFragmentLinkUpdateCacheMut.RLock()
	cache, cached := utteranceFragmentLinkUpdateCache[key]
	utteranceFragmentLinkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			utteranceFragmentLinkAllColumns,
			utteranceFragmentLinkPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("datasource_raw: unable to update utterance_fragment_links, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"utterance_fragment_links\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, utteranceFragmentLinkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(utteranceFragmentLinkType, utteranceFragmentLinkMapping, append(wl, utteranceFragmentLinkPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to update utterance_fragment_links row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: failed to get rows affected by update for utterance_fragment_links")
	}

	if !cached {
		utteranceFragmentLinkUpdateCacheMut.Lock()
		utteranceFragmentLinkUpdateCache[key] = cache
		utteranceFragmentLinkUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q utteranceFragmentLinkQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to update all for utterance_fragment_links")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to retrieve rows affected for utterance_fragment_links")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UtteranceFragmentLinkSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("datasource_raw: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), utteranceFragmentLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"utterance_fragment_links\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, utteranceFragmentLinkPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to update all in utteranceFragmentLink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to retrieve rows affected all in update all utteranceFragmentLink")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UtteranceFragmentLink) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("datasource_raw: no utterance_fragment_links provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(utteranceFragmentLinkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	utteranceFragmentLinkUpsertCacheMut.RLock()
	cache, cached := utteranceFragmentLinkUpsertCache[key]
	utteranceFragmentLinkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			utteranceFragmentLinkAllColumns,
			utteranceFragmentLinkColumnsWithDefault,
			utteranceFragmentLinkColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			utteranceFragmentLinkAllColumns,
			utteranceFragmentLinkPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("datasource_raw: unable to upsert utterance_fragment_links, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(utteranceFragmentLinkPrimaryKeyColumns))
			copy(conflict, utteranceFragmentLinkPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"utterance_fragment_links\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(utteranceFragmentLinkType, utteranceFragmentLinkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(utteranceFragmentLinkType, utteranceFragmentLinkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "datasource_raw: unable to upsert utterance_fragment_links")
	}

	if !cached {
		utteranceFragmentLinkUpsertCacheMut.Lock()
		utteranceFragmentLinkUpsertCache[key] = cache
		utteranceFragmentLinkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UtteranceFragmentLink record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UtteranceFragmentLink) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("datasource_raw: no UtteranceFragmentLink provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), utteranceFragmentLinkPrimaryKeyMapping)
	sql := "DELETE FROM \"utterance_fragment_links\" WHERE \"utterance_id\"=? AND \"sequence_no\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to delete from utterance_fragment_links")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: failed to get rows affected by delete for utterance_fragment_links")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q utteranceFragmentLinkQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("datasource_raw: no utteranceFragmentLinkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to delete all from utterance_fragment_links")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: failed to get rows affected by deleteall for utterance_fragment_links")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UtteranceFragmentLinkSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(utteranceFragmentLinkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), utteranceFragmentLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"utterance_fragment_links\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, utteranceFragmentLinkPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to delete all from utteranceFragmentLink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: failed to get rows affected by deleteall for utterance_fragment_links")
	}

	if len(utteranceFragmentLinkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UtteranceFragmentLink) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUtteranceFragmentLink(ctx, exec, o.UtteranceID, o.SequenceNo)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UtteranceFragmentLinkSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UtteranceFragmentLinkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), utteranceFragmentLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"utterance_fragment_links\".* FROM \"utterance_fragment_links\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, utteranceFragmentLinkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "datasource_raw: unable to reload all in UtteranceFragmentLinkSlice")
	}

	*o = slice

	return nil
}

// UtteranceFragmentLinkExists checks if the UtteranceFragmentLink row exists.
func UtteranceFragmentLinkExists(ctx context.Context, exec boil.ContextExecutor, utteranceID []byte, sequenceNo int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"utterance_fragment_links\" where \"utterance_id\"=? AND \"sequence_no\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, utteranceID, sequenceNo)
	}
	row := exec.QueryRowContext(ctx, sql, utteranceID, sequenceNo)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "datasource_raw: unable to check if utterance_fragment_links exists")
	}

	return exists, nil
}
