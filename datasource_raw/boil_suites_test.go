// Code generated by SQLBoiler 4.12.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package datasource_raw

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Episodes", testEpisodes)
	t.Run("Podcasts", testPodcasts)
	t.Run("Speakers", testSpeakers)
	t.Run("Turns", testTurns)
	t.Run("Utterances", testUtterances)
}

func TestDelete(t *testing.T) {
	t.Run("Episodes", testEpisodesDelete)
	t.Run("Podcasts", testPodcastsDelete)
	t.Run("Speakers", testSpeakersDelete)
	t.Run("Turns", testTurnsDelete)
	t.Run("Utterances", testUtterancesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Episodes", testEpisodesQueryDeleteAll)
	t.Run("Podcasts", testPodcastsQueryDeleteAll)
	t.Run("Speakers", testSpeakersQueryDeleteAll)
	t.Run("Turns", testTurnsQueryDeleteAll)
	t.Run("Utterances", testUtterancesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Episodes", testEpisodesSliceDeleteAll)
	t.Run("Podcasts", testPodcastsSliceDeleteAll)
	t.Run("Speakers", testSpeakersSliceDeleteAll)
	t.Run("Turns", testTurnsSliceDeleteAll)
	t.Run("Utterances", testUtterancesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Episodes", testEpisodesExists)
	t.Run("Podcasts", testPodcastsExists)
	t.Run("Speakers", testSpeakersExists)
	t.Run("Turns", testTurnsExists)
	t.Run("Utterances", testUtterancesExists)
}

func TestFind(t *testing.T) {
	t.Run("Episodes", testEpisodesFind)
	t.Run("Podcasts", testPodcastsFind)
	t.Run("Speakers", testSpeakersFind)
	t.Run("Turns", testTurnsFind)
	t.Run("Utterances", testUtterancesFind)
}

func TestBind(t *testing.T) {
	t.Run("Episodes", testEpisodesBind)
	t.Run("Podcasts", testPodcastsBind)
	t.Run("Speakers", testSpeakersBind)
	t.Run("Turns", testTurnsBind)
	t.Run("Utterances", testUtterancesBind)
}

func TestOne(t *testing.T) {
	t.Run("Episodes", testEpisodesOne)
	t.Run("Podcasts", testPodcastsOne)
	t.Run("Speakers", testSpeakersOne)
	t.Run("Turns", testTurnsOne)
	t.Run("Utterances", testUtterancesOne)
}

func TestAll(t *testing.T) {
	t.Run("Episodes", testEpisodesAll)
	t.Run("Podcasts", testPodcastsAll)
	t.Run("Speakers", testSpeakersAll)
	t.Run("Turns", testTurnsAll)
	t.Run("Utterances", testUtterancesAll)
}

func TestCount(t *testing.T) {
	t.Run("Episodes", testEpisodesCount)
	t.Run("Podcasts", testPodcastsCount)
	t.Run("Speakers", testSpeakersCount)
	t.Run("Turns", testTurnsCount)
	t.Run("Utterances", testUtterancesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Episodes", testEpisodesHooks)
	t.Run("Podcasts", testPodcastsHooks)
	t.Run("Speakers", testSpeakersHooks)
	t.Run("Turns", testTurnsHooks)
	t.Run("Utterances", testUtterancesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Episodes", testEpisodesInsert)
	t.Run("Episodes", testEpisodesInsertWhitelist)
	t.Run("Podcasts", testPodcastsInsert)
	t.Run("Podcasts", testPodcastsInsertWhitelist)
	t.Run("Speakers", testSpeakersInsert)
	t.Run("Speakers", testSpeakersInsertWhitelist)
	t.Run("Turns", testTurnsInsert)
	t.Run("Turns", testTurnsInsertWhitelist)
	t.Run("Utterances", testUtterancesInsert)
	t.Run("Utterances", testUtterancesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("EpisodeToPodcastUsingPodcast", testEpisodeToOnePodcastUsingPodcast)
	t.Run("TurnToEpisodeUsingEpisode", testTurnToOneEpisodeUsingEpisode)
	t.Run("UtteranceToTurnUsingTurn", testUtteranceToOneTurnUsingTurn)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("EpisodeToTurns", testEpisodeToManyTurns)
	t.Run("PodcastToEpisodes", testPodcastToManyEpisodes)
	t.Run("SpeakerToUtterances", testSpeakerToManyUtterances)
	t.Run("TurnToUtterances", testTurnToManyUtterances)
	t.Run("UtteranceToSpeakers", testUtteranceToManySpeakers)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("EpisodeToPodcastUsingEpisodes", testEpisodeToOneSetOpPodcastUsingPodcast)
	t.Run("TurnToEpisodeUsingTurns", testTurnToOneSetOpEpisodeUsingEpisode)
	t.Run("UtteranceToTurnUsingUtterances", testUtteranceToOneSetOpTurnUsingTurn)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("EpisodeToTurns", testEpisodeToManyAddOpTurns)
	t.Run("PodcastToEpisodes", testPodcastToManyAddOpEpisodes)
	t.Run("SpeakerToUtterances", testSpeakerToManyAddOpUtterances)
	t.Run("TurnToUtterances", testTurnToManyAddOpUtterances)
	t.Run("UtteranceToSpeakers", testUtteranceToManyAddOpSpeakers)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("SpeakerToUtterances", testSpeakerToManySetOpUtterances)
	t.Run("UtteranceToSpeakers", testUtteranceToManySetOpSpeakers)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("SpeakerToUtterances", testSpeakerToManyRemoveOpUtterances)
	t.Run("UtteranceToSpeakers", testUtteranceToManyRemoveOpSpeakers)
}

func TestReload(t *testing.T) {
	t.Run("Episodes", testEpisodesReload)
	t.Run("Podcasts", testPodcastsReload)
	t.Run("Speakers", testSpeakersReload)
	t.Run("Turns", testTurnsReload)
	t.Run("Utterances", testUtterancesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Episodes", testEpisodesReloadAll)
	t.Run("Podcasts", testPodcastsReloadAll)
	t.Run("Speakers", testSpeakersReloadAll)
	t.Run("Turns", testTurnsReloadAll)
	t.Run("Utterances", testUtterancesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Episodes", testEpisodesSelect)
	t.Run("Podcasts", testPodcastsSelect)
	t.Run("Speakers", testSpeakersSelect)
	t.Run("Turns", testTurnsSelect)
	t.Run("Utterances", testUtterancesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Episodes", testEpisodesUpdate)
	t.Run("Podcasts", testPodcastsUpdate)
	t.Run("Speakers", testSpeakersUpdate)
	t.Run("Turns", testTurnsUpdate)
	t.Run("Utterances", testUtterancesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Episodes", testEpisodesSliceUpdateAll)
	t.Run("Podcasts", testPodcastsSliceUpdateAll)
	t.Run("Speakers", testSpeakersSliceUpdateAll)
	t.Run("Turns", testTurnsSliceUpdateAll)
	t.Run("Utterances", testUtterancesSliceUpdateAll)
}
