// Code generated by SQLBoiler 4.12.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package datasource_raw

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testEpisodes(t *testing.T) {
	t.Parallel()

	query := Episodes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testEpisodesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Episode{}
	if err = randomize.Struct(seed, o, episodeDBTypes, true, episodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Episodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEpisodesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Episode{}
	if err = randomize.Struct(seed, o, episodeDBTypes, true, episodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Episodes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Episodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEpisodesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Episode{}
	if err = randomize.Struct(seed, o, episodeDBTypes, true, episodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EpisodeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Episodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEpisodesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Episode{}
	if err = randomize.Struct(seed, o, episodeDBTypes, true, episodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := EpisodeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Episode exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EpisodeExists to return true, but got false.")
	}
}

func testEpisodesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Episode{}
	if err = randomize.Struct(seed, o, episodeDBTypes, true, episodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	episodeFound, err := FindEpisode(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if episodeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testEpisodesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Episode{}
	if err = randomize.Struct(seed, o, episodeDBTypes, true, episodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Episodes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testEpisodesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Episode{}
	if err = randomize.Struct(seed, o, episodeDBTypes, true, episodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Episodes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEpisodesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	episodeOne := &Episode{}
	episodeTwo := &Episode{}
	if err = randomize.Struct(seed, episodeOne, episodeDBTypes, false, episodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}
	if err = randomize.Struct(seed, episodeTwo, episodeDBTypes, false, episodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = episodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = episodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Episodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEpisodesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	episodeOne := &Episode{}
	episodeTwo := &Episode{}
	if err = randomize.Struct(seed, episodeOne, episodeDBTypes, false, episodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}
	if err = randomize.Struct(seed, episodeTwo, episodeDBTypes, false, episodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = episodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = episodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Episodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func episodeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Episode) error {
	*o = Episode{}
	return nil
}

func episodeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Episode) error {
	*o = Episode{}
	return nil
}

func episodeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Episode) error {
	*o = Episode{}
	return nil
}

func episodeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Episode) error {
	*o = Episode{}
	return nil
}

func episodeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Episode) error {
	*o = Episode{}
	return nil
}

func episodeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Episode) error {
	*o = Episode{}
	return nil
}

func episodeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Episode) error {
	*o = Episode{}
	return nil
}

func episodeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Episode) error {
	*o = Episode{}
	return nil
}

func episodeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Episode) error {
	*o = Episode{}
	return nil
}

func testEpisodesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Episode{}
	o := &Episode{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, episodeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Episode object: %s", err)
	}

	AddEpisodeHook(boil.BeforeInsertHook, episodeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	episodeBeforeInsertHooks = []EpisodeHook{}

	AddEpisodeHook(boil.AfterInsertHook, episodeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	episodeAfterInsertHooks = []EpisodeHook{}

	AddEpisodeHook(boil.AfterSelectHook, episodeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	episodeAfterSelectHooks = []EpisodeHook{}

	AddEpisodeHook(boil.BeforeUpdateHook, episodeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	episodeBeforeUpdateHooks = []EpisodeHook{}

	AddEpisodeHook(boil.AfterUpdateHook, episodeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	episodeAfterUpdateHooks = []EpisodeHook{}

	AddEpisodeHook(boil.BeforeDeleteHook, episodeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	episodeBeforeDeleteHooks = []EpisodeHook{}

	AddEpisodeHook(boil.AfterDeleteHook, episodeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	episodeAfterDeleteHooks = []EpisodeHook{}

	AddEpisodeHook(boil.BeforeUpsertHook, episodeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	episodeBeforeUpsertHooks = []EpisodeHook{}

	AddEpisodeHook(boil.AfterUpsertHook, episodeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	episodeAfterUpsertHooks = []EpisodeHook{}
}

func testEpisodesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Episode{}
	if err = randomize.Struct(seed, o, episodeDBTypes, true, episodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Episodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEpisodesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Episode{}
	if err = randomize.Struct(seed, o, episodeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(episodeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Episodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEpisodeToManyTurns(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Episode
	var b, c Turn

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, episodeDBTypes, true, episodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, turnDBTypes, false, turnColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, turnDBTypes, false, turnColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.EpisodeID = a.ID
	c.EpisodeID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Turns().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.EpisodeID == b.EpisodeID {
			bFound = true
		}
		if v.EpisodeID == c.EpisodeID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := EpisodeSlice{&a}
	if err = a.L.LoadTurns(ctx, tx, false, (*[]*Episode)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Turns); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Turns = nil
	if err = a.L.LoadTurns(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Turns); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testEpisodeToManyAddOpTurns(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Episode
	var b, c, d, e Turn

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, episodeDBTypes, false, strmangle.SetComplement(episodePrimaryKeyColumns, episodeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Turn{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, turnDBTypes, false, strmangle.SetComplement(turnPrimaryKeyColumns, turnColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Turn{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTurns(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.EpisodeID {
			t.Error("foreign key was wrong value", a.ID, first.EpisodeID)
		}
		if a.ID != second.EpisodeID {
			t.Error("foreign key was wrong value", a.ID, second.EpisodeID)
		}

		if first.R.Episode != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Episode != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Turns[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Turns[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Turns().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testEpisodeToOnePodcastUsingPodcast(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Episode
	var foreign Podcast

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, episodeDBTypes, false, episodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, podcastDBTypes, false, podcastColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Podcast struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PodcastID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Podcast().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := EpisodeSlice{&local}
	if err = local.L.LoadPodcast(ctx, tx, false, (*[]*Episode)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Podcast == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Podcast = nil
	if err = local.L.LoadPodcast(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Podcast == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testEpisodeToOneSetOpPodcastUsingPodcast(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Episode
	var b, c Podcast

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, episodeDBTypes, false, strmangle.SetComplement(episodePrimaryKeyColumns, episodeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, podcastDBTypes, false, strmangle.SetComplement(podcastPrimaryKeyColumns, podcastColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, podcastDBTypes, false, strmangle.SetComplement(podcastPrimaryKeyColumns, podcastColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Podcast{&b, &c} {
		err = a.SetPodcast(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Podcast != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Episodes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PodcastID != x.ID {
			t.Error("foreign key was wrong value", a.PodcastID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PodcastID))
		reflect.Indirect(reflect.ValueOf(&a.PodcastID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PodcastID != x.ID {
			t.Error("foreign key was wrong value", a.PodcastID, x.ID)
		}
	}
}

func testEpisodesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Episode{}
	if err = randomize.Struct(seed, o, episodeDBTypes, true, episodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEpisodesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Episode{}
	if err = randomize.Struct(seed, o, episodeDBTypes, true, episodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EpisodeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEpisodesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Episode{}
	if err = randomize.Struct(seed, o, episodeDBTypes, true, episodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Episodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	episodeDBTypes = map[string]string{`ID`: `uuid`, `PodcastID`: `uuid`, `Number`: `integer`, `Name`: `text`, `AiredAt`: `date`, `PatreonOnly`: `integer`}
	_              = bytes.MinRead
)

func testEpisodesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(episodePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(episodeAllColumns) == len(episodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Episode{}
	if err = randomize.Struct(seed, o, episodeDBTypes, true, episodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Episodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, episodeDBTypes, true, episodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testEpisodesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(episodeAllColumns) == len(episodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Episode{}
	if err = randomize.Struct(seed, o, episodeDBTypes, true, episodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Episodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, episodeDBTypes, true, episodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(episodeAllColumns, episodePrimaryKeyColumns) {
		fields = episodeAllColumns
	} else {
		fields = strmangle.SetComplement(
			episodeAllColumns,
			episodePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := EpisodeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testEpisodesUpsert(t *testing.T) {
	t.Parallel()

	if len(episodeAllColumns) == len(episodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Episode{}
	if err = randomize.Struct(seed, &o, episodeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Episode: %s", err)
	}

	count, err := Episodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, episodeDBTypes, false, episodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Episode: %s", err)
	}

	count, err = Episodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
