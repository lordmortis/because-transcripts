// Code generated by SQLBoiler 4.12.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package datasource_raw

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UtteranceFragment is an object representing the database table.
type UtteranceFragment struct {
	ID        []byte      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Value     null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`
	CreatedAt int64       `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt int64       `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *utteranceFragmentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L utteranceFragmentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UtteranceFragmentColumns = struct {
	ID        string
	Value     string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Value:     "value",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var UtteranceFragmentTableColumns = struct {
	ID        string
	Value     string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "utterance_fragments.id",
	Value:     "utterance_fragments.value",
	CreatedAt: "utterance_fragments.created_at",
	UpdatedAt: "utterance_fragments.updated_at",
}

// Generated where

var UtteranceFragmentWhere = struct {
	ID        whereHelper__byte
	Value     whereHelpernull_String
	CreatedAt whereHelperint64
	UpdatedAt whereHelperint64
}{
	ID:        whereHelper__byte{field: "\"utterance_fragments\".\"id\""},
	Value:     whereHelpernull_String{field: "\"utterance_fragments\".\"value\""},
	CreatedAt: whereHelperint64{field: "\"utterance_fragments\".\"created_at\""},
	UpdatedAt: whereHelperint64{field: "\"utterance_fragments\".\"updated_at\""},
}

// UtteranceFragmentRels is where relationship names are stored.
var UtteranceFragmentRels = struct {
	UtteranceFragmentLinks string
}{
	UtteranceFragmentLinks: "UtteranceFragmentLinks",
}

// utteranceFragmentR is where relationships are stored.
type utteranceFragmentR struct {
	UtteranceFragmentLinks UtteranceFragmentLinkSlice `boil:"UtteranceFragmentLinks" json:"UtteranceFragmentLinks" toml:"UtteranceFragmentLinks" yaml:"UtteranceFragmentLinks"`
}

// NewStruct creates a new relationship struct
func (*utteranceFragmentR) NewStruct() *utteranceFragmentR {
	return &utteranceFragmentR{}
}

func (r *utteranceFragmentR) GetUtteranceFragmentLinks() UtteranceFragmentLinkSlice {
	if r == nil {
		return nil
	}
	return r.UtteranceFragmentLinks
}

// utteranceFragmentL is where Load methods for each relationship are stored.
type utteranceFragmentL struct{}

var (
	utteranceFragmentAllColumns            = []string{"id", "value", "created_at", "updated_at"}
	utteranceFragmentColumnsWithoutDefault = []string{"id", "created_at", "updated_at"}
	utteranceFragmentColumnsWithDefault    = []string{"value"}
	utteranceFragmentPrimaryKeyColumns     = []string{"id"}
	utteranceFragmentGeneratedColumns      = []string{}
)

type (
	// UtteranceFragmentSlice is an alias for a slice of pointers to UtteranceFragment.
	// This should almost always be used instead of []UtteranceFragment.
	UtteranceFragmentSlice []*UtteranceFragment
	// UtteranceFragmentHook is the signature for custom UtteranceFragment hook methods
	UtteranceFragmentHook func(context.Context, boil.ContextExecutor, *UtteranceFragment) error

	utteranceFragmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	utteranceFragmentType                 = reflect.TypeOf(&UtteranceFragment{})
	utteranceFragmentMapping              = queries.MakeStructMapping(utteranceFragmentType)
	utteranceFragmentPrimaryKeyMapping, _ = queries.BindMapping(utteranceFragmentType, utteranceFragmentMapping, utteranceFragmentPrimaryKeyColumns)
	utteranceFragmentInsertCacheMut       sync.RWMutex
	utteranceFragmentInsertCache          = make(map[string]insertCache)
	utteranceFragmentUpdateCacheMut       sync.RWMutex
	utteranceFragmentUpdateCache          = make(map[string]updateCache)
	utteranceFragmentUpsertCacheMut       sync.RWMutex
	utteranceFragmentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var utteranceFragmentAfterSelectHooks []UtteranceFragmentHook

var utteranceFragmentBeforeInsertHooks []UtteranceFragmentHook
var utteranceFragmentAfterInsertHooks []UtteranceFragmentHook

var utteranceFragmentBeforeUpdateHooks []UtteranceFragmentHook
var utteranceFragmentAfterUpdateHooks []UtteranceFragmentHook

var utteranceFragmentBeforeDeleteHooks []UtteranceFragmentHook
var utteranceFragmentAfterDeleteHooks []UtteranceFragmentHook

var utteranceFragmentBeforeUpsertHooks []UtteranceFragmentHook
var utteranceFragmentAfterUpsertHooks []UtteranceFragmentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UtteranceFragment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceFragmentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UtteranceFragment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceFragmentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UtteranceFragment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceFragmentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UtteranceFragment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceFragmentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UtteranceFragment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceFragmentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UtteranceFragment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceFragmentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UtteranceFragment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceFragmentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UtteranceFragment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceFragmentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UtteranceFragment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range utteranceFragmentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUtteranceFragmentHook registers your hook function for all future operations.
func AddUtteranceFragmentHook(hookPoint boil.HookPoint, utteranceFragmentHook UtteranceFragmentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		utteranceFragmentAfterSelectHooks = append(utteranceFragmentAfterSelectHooks, utteranceFragmentHook)
	case boil.BeforeInsertHook:
		utteranceFragmentBeforeInsertHooks = append(utteranceFragmentBeforeInsertHooks, utteranceFragmentHook)
	case boil.AfterInsertHook:
		utteranceFragmentAfterInsertHooks = append(utteranceFragmentAfterInsertHooks, utteranceFragmentHook)
	case boil.BeforeUpdateHook:
		utteranceFragmentBeforeUpdateHooks = append(utteranceFragmentBeforeUpdateHooks, utteranceFragmentHook)
	case boil.AfterUpdateHook:
		utteranceFragmentAfterUpdateHooks = append(utteranceFragmentAfterUpdateHooks, utteranceFragmentHook)
	case boil.BeforeDeleteHook:
		utteranceFragmentBeforeDeleteHooks = append(utteranceFragmentBeforeDeleteHooks, utteranceFragmentHook)
	case boil.AfterDeleteHook:
		utteranceFragmentAfterDeleteHooks = append(utteranceFragmentAfterDeleteHooks, utteranceFragmentHook)
	case boil.BeforeUpsertHook:
		utteranceFragmentBeforeUpsertHooks = append(utteranceFragmentBeforeUpsertHooks, utteranceFragmentHook)
	case boil.AfterUpsertHook:
		utteranceFragmentAfterUpsertHooks = append(utteranceFragmentAfterUpsertHooks, utteranceFragmentHook)
	}
}

// One returns a single utteranceFragment record from the query.
func (q utteranceFragmentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UtteranceFragment, error) {
	o := &UtteranceFragment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "datasource_raw: failed to execute a one query for utterance_fragments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UtteranceFragment records from the query.
func (q utteranceFragmentQuery) All(ctx context.Context, exec boil.ContextExecutor) (UtteranceFragmentSlice, error) {
	var o []*UtteranceFragment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "datasource_raw: failed to assign all query results to UtteranceFragment slice")
	}

	if len(utteranceFragmentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UtteranceFragment records in the query.
func (q utteranceFragmentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: failed to count utterance_fragments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q utteranceFragmentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "datasource_raw: failed to check if utterance_fragments exists")
	}

	return count > 0, nil
}

// UtteranceFragmentLinks retrieves all the utterance_fragment_link's UtteranceFragmentLinks with an executor.
func (o *UtteranceFragment) UtteranceFragmentLinks(mods ...qm.QueryMod) utteranceFragmentLinkQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"utterance_fragment_links\".\"utterance_fragment_id\"=?", o.ID),
	)

	return UtteranceFragmentLinks(queryMods...)
}

// LoadUtteranceFragmentLinks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (utteranceFragmentL) LoadUtteranceFragmentLinks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUtteranceFragment interface{}, mods queries.Applicator) error {
	var slice []*UtteranceFragment
	var object *UtteranceFragment

	if singular {
		var ok bool
		object, ok = maybeUtteranceFragment.(*UtteranceFragment)
		if !ok {
			object = new(UtteranceFragment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUtteranceFragment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUtteranceFragment))
			}
		}
	} else {
		s, ok := maybeUtteranceFragment.(*[]*UtteranceFragment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUtteranceFragment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUtteranceFragment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &utteranceFragmentR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &utteranceFragmentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`utterance_fragment_links`),
		qm.WhereIn(`utterance_fragment_links.utterance_fragment_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load utterance_fragment_links")
	}

	var resultSlice []*UtteranceFragmentLink
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice utterance_fragment_links")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on utterance_fragment_links")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for utterance_fragment_links")
	}

	if len(utteranceFragmentLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UtteranceFragmentLinks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &utteranceFragmentLinkR{}
			}
			foreign.R.UtteranceFragment = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.UtteranceFragmentID) {
				local.R.UtteranceFragmentLinks = append(local.R.UtteranceFragmentLinks, foreign)
				if foreign.R == nil {
					foreign.R = &utteranceFragmentLinkR{}
				}
				foreign.R.UtteranceFragment = local
				break
			}
		}
	}

	return nil
}

// AddUtteranceFragmentLinks adds the given related objects to the existing relationships
// of the utterance_fragment, optionally inserting them as new records.
// Appends related to o.R.UtteranceFragmentLinks.
// Sets related.R.UtteranceFragment appropriately.
func (o *UtteranceFragment) AddUtteranceFragmentLinks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UtteranceFragmentLink) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UtteranceFragmentID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"utterance_fragment_links\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"utterance_fragment_id"}),
				strmangle.WhereClause("\"", "\"", 0, utteranceFragmentLinkPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UtteranceID, rel.SequenceNo}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UtteranceFragmentID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &utteranceFragmentR{
			UtteranceFragmentLinks: related,
		}
	} else {
		o.R.UtteranceFragmentLinks = append(o.R.UtteranceFragmentLinks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &utteranceFragmentLinkR{
				UtteranceFragment: o,
			}
		} else {
			rel.R.UtteranceFragment = o
		}
	}
	return nil
}

// UtteranceFragments retrieves all the records using an executor.
func UtteranceFragments(mods ...qm.QueryMod) utteranceFragmentQuery {
	mods = append(mods, qm.From("\"utterance_fragments\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"utterance_fragments\".*"})
	}

	return utteranceFragmentQuery{q}
}

// FindUtteranceFragment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUtteranceFragment(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*UtteranceFragment, error) {
	utteranceFragmentObj := &UtteranceFragment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"utterance_fragments\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, utteranceFragmentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "datasource_raw: unable to select from utterance_fragments")
	}

	if err = utteranceFragmentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return utteranceFragmentObj, err
	}

	return utteranceFragmentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UtteranceFragment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("datasource_raw: no utterance_fragments provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(utteranceFragmentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	utteranceFragmentInsertCacheMut.RLock()
	cache, cached := utteranceFragmentInsertCache[key]
	utteranceFragmentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			utteranceFragmentAllColumns,
			utteranceFragmentColumnsWithDefault,
			utteranceFragmentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(utteranceFragmentType, utteranceFragmentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(utteranceFragmentType, utteranceFragmentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"utterance_fragments\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"utterance_fragments\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "datasource_raw: unable to insert into utterance_fragments")
	}

	if !cached {
		utteranceFragmentInsertCacheMut.Lock()
		utteranceFragmentInsertCache[key] = cache
		utteranceFragmentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UtteranceFragment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UtteranceFragment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	utteranceFragmentUpdateCacheMut.RLock()
	cache, cached := utteranceFragmentUpdateCache[key]
	utteranceFragmentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			utteranceFragmentAllColumns,
			utteranceFragmentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("datasource_raw: unable to update utterance_fragments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"utterance_fragments\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, utteranceFragmentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(utteranceFragmentType, utteranceFragmentMapping, append(wl, utteranceFragmentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to update utterance_fragments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: failed to get rows affected by update for utterance_fragments")
	}

	if !cached {
		utteranceFragmentUpdateCacheMut.Lock()
		utteranceFragmentUpdateCache[key] = cache
		utteranceFragmentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q utteranceFragmentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to update all for utterance_fragments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to retrieve rows affected for utterance_fragments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UtteranceFragmentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("datasource_raw: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), utteranceFragmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"utterance_fragments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, utteranceFragmentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to update all in utteranceFragment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to retrieve rows affected all in update all utteranceFragment")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UtteranceFragment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("datasource_raw: no utterance_fragments provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(utteranceFragmentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	utteranceFragmentUpsertCacheMut.RLock()
	cache, cached := utteranceFragmentUpsertCache[key]
	utteranceFragmentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			utteranceFragmentAllColumns,
			utteranceFragmentColumnsWithDefault,
			utteranceFragmentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			utteranceFragmentAllColumns,
			utteranceFragmentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("datasource_raw: unable to upsert utterance_fragments, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(utteranceFragmentPrimaryKeyColumns))
			copy(conflict, utteranceFragmentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"utterance_fragments\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(utteranceFragmentType, utteranceFragmentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(utteranceFragmentType, utteranceFragmentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "datasource_raw: unable to upsert utterance_fragments")
	}

	if !cached {
		utteranceFragmentUpsertCacheMut.Lock()
		utteranceFragmentUpsertCache[key] = cache
		utteranceFragmentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UtteranceFragment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UtteranceFragment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("datasource_raw: no UtteranceFragment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), utteranceFragmentPrimaryKeyMapping)
	sql := "DELETE FROM \"utterance_fragments\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to delete from utterance_fragments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: failed to get rows affected by delete for utterance_fragments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q utteranceFragmentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("datasource_raw: no utteranceFragmentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to delete all from utterance_fragments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: failed to get rows affected by deleteall for utterance_fragments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UtteranceFragmentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(utteranceFragmentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), utteranceFragmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"utterance_fragments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, utteranceFragmentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to delete all from utteranceFragment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: failed to get rows affected by deleteall for utterance_fragments")
	}

	if len(utteranceFragmentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UtteranceFragment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUtteranceFragment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UtteranceFragmentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UtteranceFragmentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), utteranceFragmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"utterance_fragments\".* FROM \"utterance_fragments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, utteranceFragmentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "datasource_raw: unable to reload all in UtteranceFragmentSlice")
	}

	*o = slice

	return nil
}

// UtteranceFragmentExists checks if the UtteranceFragment row exists.
func UtteranceFragmentExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"utterance_fragments\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "datasource_raw: unable to check if utterance_fragments exists")
	}

	return exists, nil
}
