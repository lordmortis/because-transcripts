// Code generated by SQLBoiler 4.12.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package datasource_raw

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Speaker is an object representing the database table.
type Speaker struct {
	ID        []byte      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	CreatedAt int64       `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt int64       `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *speakerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L speakerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SpeakerColumns = struct {
	ID        string
	Name      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Name:      "name",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var SpeakerTableColumns = struct {
	ID        string
	Name      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "speaker.id",
	Name:      "speaker.name",
	CreatedAt: "speaker.created_at",
	UpdatedAt: "speaker.updated_at",
}

// Generated where

var SpeakerWhere = struct {
	ID        whereHelper__byte
	Name      whereHelpernull_String
	CreatedAt whereHelperint64
	UpdatedAt whereHelperint64
}{
	ID:        whereHelper__byte{field: "\"speaker\".\"id\""},
	Name:      whereHelpernull_String{field: "\"speaker\".\"name\""},
	CreatedAt: whereHelperint64{field: "\"speaker\".\"created_at\""},
	UpdatedAt: whereHelperint64{field: "\"speaker\".\"updated_at\""},
}

// SpeakerRels is where relationship names are stored.
var SpeakerRels = struct {
	Utterances string
}{
	Utterances: "Utterances",
}

// speakerR is where relationships are stored.
type speakerR struct {
	Utterances UtteranceSlice `boil:"Utterances" json:"Utterances" toml:"Utterances" yaml:"Utterances"`
}

// NewStruct creates a new relationship struct
func (*speakerR) NewStruct() *speakerR {
	return &speakerR{}
}

func (r *speakerR) GetUtterances() UtteranceSlice {
	if r == nil {
		return nil
	}
	return r.Utterances
}

// speakerL is where Load methods for each relationship are stored.
type speakerL struct{}

var (
	speakerAllColumns            = []string{"id", "name", "created_at", "updated_at"}
	speakerColumnsWithoutDefault = []string{"id", "created_at", "updated_at"}
	speakerColumnsWithDefault    = []string{"name"}
	speakerPrimaryKeyColumns     = []string{"id"}
	speakerGeneratedColumns      = []string{}
)

type (
	// SpeakerSlice is an alias for a slice of pointers to Speaker.
	// This should almost always be used instead of []Speaker.
	SpeakerSlice []*Speaker
	// SpeakerHook is the signature for custom Speaker hook methods
	SpeakerHook func(context.Context, boil.ContextExecutor, *Speaker) error

	speakerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	speakerType                 = reflect.TypeOf(&Speaker{})
	speakerMapping              = queries.MakeStructMapping(speakerType)
	speakerPrimaryKeyMapping, _ = queries.BindMapping(speakerType, speakerMapping, speakerPrimaryKeyColumns)
	speakerInsertCacheMut       sync.RWMutex
	speakerInsertCache          = make(map[string]insertCache)
	speakerUpdateCacheMut       sync.RWMutex
	speakerUpdateCache          = make(map[string]updateCache)
	speakerUpsertCacheMut       sync.RWMutex
	speakerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var speakerAfterSelectHooks []SpeakerHook

var speakerBeforeInsertHooks []SpeakerHook
var speakerAfterInsertHooks []SpeakerHook

var speakerBeforeUpdateHooks []SpeakerHook
var speakerAfterUpdateHooks []SpeakerHook

var speakerBeforeDeleteHooks []SpeakerHook
var speakerAfterDeleteHooks []SpeakerHook

var speakerBeforeUpsertHooks []SpeakerHook
var speakerAfterUpsertHooks []SpeakerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Speaker) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range speakerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Speaker) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range speakerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Speaker) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range speakerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Speaker) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range speakerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Speaker) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range speakerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Speaker) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range speakerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Speaker) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range speakerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Speaker) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range speakerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Speaker) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range speakerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSpeakerHook registers your hook function for all future operations.
func AddSpeakerHook(hookPoint boil.HookPoint, speakerHook SpeakerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		speakerAfterSelectHooks = append(speakerAfterSelectHooks, speakerHook)
	case boil.BeforeInsertHook:
		speakerBeforeInsertHooks = append(speakerBeforeInsertHooks, speakerHook)
	case boil.AfterInsertHook:
		speakerAfterInsertHooks = append(speakerAfterInsertHooks, speakerHook)
	case boil.BeforeUpdateHook:
		speakerBeforeUpdateHooks = append(speakerBeforeUpdateHooks, speakerHook)
	case boil.AfterUpdateHook:
		speakerAfterUpdateHooks = append(speakerAfterUpdateHooks, speakerHook)
	case boil.BeforeDeleteHook:
		speakerBeforeDeleteHooks = append(speakerBeforeDeleteHooks, speakerHook)
	case boil.AfterDeleteHook:
		speakerAfterDeleteHooks = append(speakerAfterDeleteHooks, speakerHook)
	case boil.BeforeUpsertHook:
		speakerBeforeUpsertHooks = append(speakerBeforeUpsertHooks, speakerHook)
	case boil.AfterUpsertHook:
		speakerAfterUpsertHooks = append(speakerAfterUpsertHooks, speakerHook)
	}
}

// One returns a single speaker record from the query.
func (q speakerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Speaker, error) {
	o := &Speaker{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "datasource_raw: failed to execute a one query for speaker")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Speaker records from the query.
func (q speakerQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpeakerSlice, error) {
	var o []*Speaker

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "datasource_raw: failed to assign all query results to Speaker slice")
	}

	if len(speakerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Speaker records in the query.
func (q speakerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: failed to count speaker rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q speakerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "datasource_raw: failed to check if speaker exists")
	}

	return count > 0, nil
}

// Utterances retrieves all the utterance's Utterances with an executor.
func (o *Speaker) Utterances(mods ...qm.QueryMod) utteranceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"utterances\".\"speaker_id\"=?", o.ID),
	)

	return Utterances(queryMods...)
}

// LoadUtterances allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (speakerL) LoadUtterances(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpeaker interface{}, mods queries.Applicator) error {
	var slice []*Speaker
	var object *Speaker

	if singular {
		var ok bool
		object, ok = maybeSpeaker.(*Speaker)
		if !ok {
			object = new(Speaker)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSpeaker)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSpeaker))
			}
		}
	} else {
		s, ok := maybeSpeaker.(*[]*Speaker)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSpeaker)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSpeaker))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &speakerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &speakerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`utterances`),
		qm.WhereIn(`utterances.speaker_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load utterances")
	}

	var resultSlice []*Utterance
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice utterances")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on utterances")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for utterances")
	}

	if len(utteranceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Utterances = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &utteranceR{}
			}
			foreign.R.Speaker = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SpeakerID) {
				local.R.Utterances = append(local.R.Utterances, foreign)
				if foreign.R == nil {
					foreign.R = &utteranceR{}
				}
				foreign.R.Speaker = local
				break
			}
		}
	}

	return nil
}

// AddUtterances adds the given related objects to the existing relationships
// of the speaker, optionally inserting them as new records.
// Appends related to o.R.Utterances.
// Sets related.R.Speaker appropriately.
func (o *Speaker) AddUtterances(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Utterance) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SpeakerID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"utterances\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"speaker_id"}),
				strmangle.WhereClause("\"", "\"", 0, utterancePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SpeakerID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &speakerR{
			Utterances: related,
		}
	} else {
		o.R.Utterances = append(o.R.Utterances, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &utteranceR{
				Speaker: o,
			}
		} else {
			rel.R.Speaker = o
		}
	}
	return nil
}

// Speakers retrieves all the records using an executor.
func Speakers(mods ...qm.QueryMod) speakerQuery {
	mods = append(mods, qm.From("\"speaker\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"speaker\".*"})
	}

	return speakerQuery{q}
}

// FindSpeaker retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSpeaker(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*Speaker, error) {
	speakerObj := &Speaker{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"speaker\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, speakerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "datasource_raw: unable to select from speaker")
	}

	if err = speakerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return speakerObj, err
	}

	return speakerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Speaker) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("datasource_raw: no speaker provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(speakerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	speakerInsertCacheMut.RLock()
	cache, cached := speakerInsertCache[key]
	speakerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			speakerAllColumns,
			speakerColumnsWithDefault,
			speakerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(speakerType, speakerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(speakerType, speakerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"speaker\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"speaker\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "datasource_raw: unable to insert into speaker")
	}

	if !cached {
		speakerInsertCacheMut.Lock()
		speakerInsertCache[key] = cache
		speakerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Speaker.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Speaker) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	speakerUpdateCacheMut.RLock()
	cache, cached := speakerUpdateCache[key]
	speakerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			speakerAllColumns,
			speakerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("datasource_raw: unable to update speaker, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"speaker\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, speakerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(speakerType, speakerMapping, append(wl, speakerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to update speaker row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: failed to get rows affected by update for speaker")
	}

	if !cached {
		speakerUpdateCacheMut.Lock()
		speakerUpdateCache[key] = cache
		speakerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q speakerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to update all for speaker")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to retrieve rows affected for speaker")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SpeakerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("datasource_raw: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), speakerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"speaker\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, speakerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to update all in speaker slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to retrieve rows affected all in update all speaker")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Speaker) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("datasource_raw: no speaker provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(speakerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	speakerUpsertCacheMut.RLock()
	cache, cached := speakerUpsertCache[key]
	speakerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			speakerAllColumns,
			speakerColumnsWithDefault,
			speakerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			speakerAllColumns,
			speakerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("datasource_raw: unable to upsert speaker, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(speakerPrimaryKeyColumns))
			copy(conflict, speakerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"speaker\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(speakerType, speakerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(speakerType, speakerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "datasource_raw: unable to upsert speaker")
	}

	if !cached {
		speakerUpsertCacheMut.Lock()
		speakerUpsertCache[key] = cache
		speakerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Speaker record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Speaker) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("datasource_raw: no Speaker provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), speakerPrimaryKeyMapping)
	sql := "DELETE FROM \"speaker\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to delete from speaker")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: failed to get rows affected by delete for speaker")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q speakerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("datasource_raw: no speakerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to delete all from speaker")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: failed to get rows affected by deleteall for speaker")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SpeakerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(speakerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), speakerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"speaker\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, speakerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: unable to delete all from speaker slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datasource_raw: failed to get rows affected by deleteall for speaker")
	}

	if len(speakerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Speaker) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSpeaker(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SpeakerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SpeakerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), speakerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"speaker\".* FROM \"speaker\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, speakerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "datasource_raw: unable to reload all in SpeakerSlice")
	}

	*o = slice

	return nil
}

// SpeakerExists checks if the Speaker row exists.
func SpeakerExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"speaker\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "datasource_raw: unable to check if speaker exists")
	}

	return exists, nil
}
