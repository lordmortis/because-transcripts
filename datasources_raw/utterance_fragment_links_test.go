// Code generated by SQLBoiler 4.12.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package datasource_raw

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUtteranceFragmentLinks(t *testing.T) {
	t.Parallel()

	query := UtteranceFragmentLinks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUtteranceFragmentLinksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UtteranceFragmentLink{}
	if err = randomize.Struct(seed, o, utteranceFragmentLinkDBTypes, true, utteranceFragmentLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UtteranceFragmentLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUtteranceFragmentLinksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UtteranceFragmentLink{}
	if err = randomize.Struct(seed, o, utteranceFragmentLinkDBTypes, true, utteranceFragmentLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UtteranceFragmentLinks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UtteranceFragmentLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUtteranceFragmentLinksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UtteranceFragmentLink{}
	if err = randomize.Struct(seed, o, utteranceFragmentLinkDBTypes, true, utteranceFragmentLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UtteranceFragmentLinkSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UtteranceFragmentLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUtteranceFragmentLinksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UtteranceFragmentLink{}
	if err = randomize.Struct(seed, o, utteranceFragmentLinkDBTypes, true, utteranceFragmentLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UtteranceFragmentLinkExists(ctx, tx, o.UtteranceID, o.SequenceNo)
	if err != nil {
		t.Errorf("Unable to check if UtteranceFragmentLink exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UtteranceFragmentLinkExists to return true, but got false.")
	}
}

func testUtteranceFragmentLinksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UtteranceFragmentLink{}
	if err = randomize.Struct(seed, o, utteranceFragmentLinkDBTypes, true, utteranceFragmentLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	utteranceFragmentLinkFound, err := FindUtteranceFragmentLink(ctx, tx, o.UtteranceID, o.SequenceNo)
	if err != nil {
		t.Error(err)
	}

	if utteranceFragmentLinkFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUtteranceFragmentLinksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UtteranceFragmentLink{}
	if err = randomize.Struct(seed, o, utteranceFragmentLinkDBTypes, true, utteranceFragmentLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UtteranceFragmentLinks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUtteranceFragmentLinksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UtteranceFragmentLink{}
	if err = randomize.Struct(seed, o, utteranceFragmentLinkDBTypes, true, utteranceFragmentLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UtteranceFragmentLinks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUtteranceFragmentLinksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	utteranceFragmentLinkOne := &UtteranceFragmentLink{}
	utteranceFragmentLinkTwo := &UtteranceFragmentLink{}
	if err = randomize.Struct(seed, utteranceFragmentLinkOne, utteranceFragmentLinkDBTypes, false, utteranceFragmentLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}
	if err = randomize.Struct(seed, utteranceFragmentLinkTwo, utteranceFragmentLinkDBTypes, false, utteranceFragmentLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = utteranceFragmentLinkOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = utteranceFragmentLinkTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UtteranceFragmentLinks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUtteranceFragmentLinksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	utteranceFragmentLinkOne := &UtteranceFragmentLink{}
	utteranceFragmentLinkTwo := &UtteranceFragmentLink{}
	if err = randomize.Struct(seed, utteranceFragmentLinkOne, utteranceFragmentLinkDBTypes, false, utteranceFragmentLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}
	if err = randomize.Struct(seed, utteranceFragmentLinkTwo, utteranceFragmentLinkDBTypes, false, utteranceFragmentLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = utteranceFragmentLinkOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = utteranceFragmentLinkTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UtteranceFragmentLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func utteranceFragmentLinkBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UtteranceFragmentLink) error {
	*o = UtteranceFragmentLink{}
	return nil
}

func utteranceFragmentLinkAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UtteranceFragmentLink) error {
	*o = UtteranceFragmentLink{}
	return nil
}

func utteranceFragmentLinkAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UtteranceFragmentLink) error {
	*o = UtteranceFragmentLink{}
	return nil
}

func utteranceFragmentLinkBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UtteranceFragmentLink) error {
	*o = UtteranceFragmentLink{}
	return nil
}

func utteranceFragmentLinkAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UtteranceFragmentLink) error {
	*o = UtteranceFragmentLink{}
	return nil
}

func utteranceFragmentLinkBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UtteranceFragmentLink) error {
	*o = UtteranceFragmentLink{}
	return nil
}

func utteranceFragmentLinkAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UtteranceFragmentLink) error {
	*o = UtteranceFragmentLink{}
	return nil
}

func utteranceFragmentLinkBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UtteranceFragmentLink) error {
	*o = UtteranceFragmentLink{}
	return nil
}

func utteranceFragmentLinkAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UtteranceFragmentLink) error {
	*o = UtteranceFragmentLink{}
	return nil
}

func testUtteranceFragmentLinksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UtteranceFragmentLink{}
	o := &UtteranceFragmentLink{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, utteranceFragmentLinkDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink object: %s", err)
	}

	AddUtteranceFragmentLinkHook(boil.BeforeInsertHook, utteranceFragmentLinkBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	utteranceFragmentLinkBeforeInsertHooks = []UtteranceFragmentLinkHook{}

	AddUtteranceFragmentLinkHook(boil.AfterInsertHook, utteranceFragmentLinkAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	utteranceFragmentLinkAfterInsertHooks = []UtteranceFragmentLinkHook{}

	AddUtteranceFragmentLinkHook(boil.AfterSelectHook, utteranceFragmentLinkAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	utteranceFragmentLinkAfterSelectHooks = []UtteranceFragmentLinkHook{}

	AddUtteranceFragmentLinkHook(boil.BeforeUpdateHook, utteranceFragmentLinkBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	utteranceFragmentLinkBeforeUpdateHooks = []UtteranceFragmentLinkHook{}

	AddUtteranceFragmentLinkHook(boil.AfterUpdateHook, utteranceFragmentLinkAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	utteranceFragmentLinkAfterUpdateHooks = []UtteranceFragmentLinkHook{}

	AddUtteranceFragmentLinkHook(boil.BeforeDeleteHook, utteranceFragmentLinkBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	utteranceFragmentLinkBeforeDeleteHooks = []UtteranceFragmentLinkHook{}

	AddUtteranceFragmentLinkHook(boil.AfterDeleteHook, utteranceFragmentLinkAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	utteranceFragmentLinkAfterDeleteHooks = []UtteranceFragmentLinkHook{}

	AddUtteranceFragmentLinkHook(boil.BeforeUpsertHook, utteranceFragmentLinkBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	utteranceFragmentLinkBeforeUpsertHooks = []UtteranceFragmentLinkHook{}

	AddUtteranceFragmentLinkHook(boil.AfterUpsertHook, utteranceFragmentLinkAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	utteranceFragmentLinkAfterUpsertHooks = []UtteranceFragmentLinkHook{}
}

func testUtteranceFragmentLinksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UtteranceFragmentLink{}
	if err = randomize.Struct(seed, o, utteranceFragmentLinkDBTypes, true, utteranceFragmentLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UtteranceFragmentLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUtteranceFragmentLinksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UtteranceFragmentLink{}
	if err = randomize.Struct(seed, o, utteranceFragmentLinkDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(utteranceFragmentLinkColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UtteranceFragmentLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUtteranceFragmentLinkToOneUtteranceFragmentUsingUtteranceFragment(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UtteranceFragmentLink
	var foreign UtteranceFragment

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, utteranceFragmentLinkDBTypes, false, utteranceFragmentLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, utteranceFragmentDBTypes, false, utteranceFragmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UtteranceFragment struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UtteranceFragmentID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UtteranceFragment().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UtteranceFragmentLinkSlice{&local}
	if err = local.L.LoadUtteranceFragment(ctx, tx, false, (*[]*UtteranceFragmentLink)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UtteranceFragment == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UtteranceFragment = nil
	if err = local.L.LoadUtteranceFragment(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UtteranceFragment == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUtteranceFragmentLinkToOneUtteranceUsingUtterance(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UtteranceFragmentLink
	var foreign Utterance

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, utteranceFragmentLinkDBTypes, false, utteranceFragmentLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, utteranceDBTypes, false, utteranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Utterance struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UtteranceID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Utterance().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UtteranceFragmentLinkSlice{&local}
	if err = local.L.LoadUtterance(ctx, tx, false, (*[]*UtteranceFragmentLink)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Utterance == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Utterance = nil
	if err = local.L.LoadUtterance(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Utterance == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUtteranceFragmentLinkToOneSetOpUtteranceFragmentUsingUtteranceFragment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UtteranceFragmentLink
	var b, c UtteranceFragment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, utteranceFragmentLinkDBTypes, false, strmangle.SetComplement(utteranceFragmentLinkPrimaryKeyColumns, utteranceFragmentLinkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, utteranceFragmentDBTypes, false, strmangle.SetComplement(utteranceFragmentPrimaryKeyColumns, utteranceFragmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, utteranceFragmentDBTypes, false, strmangle.SetComplement(utteranceFragmentPrimaryKeyColumns, utteranceFragmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UtteranceFragment{&b, &c} {
		err = a.SetUtteranceFragment(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UtteranceFragment != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UtteranceFragmentLinks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UtteranceFragmentID, x.ID) {
			t.Error("foreign key was wrong value", a.UtteranceFragmentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UtteranceFragmentID))
		reflect.Indirect(reflect.ValueOf(&a.UtteranceFragmentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UtteranceFragmentID, x.ID) {
			t.Error("foreign key was wrong value", a.UtteranceFragmentID, x.ID)
		}
	}
}
func testUtteranceFragmentLinkToOneSetOpUtteranceUsingUtterance(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UtteranceFragmentLink
	var b, c Utterance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, utteranceFragmentLinkDBTypes, false, strmangle.SetComplement(utteranceFragmentLinkPrimaryKeyColumns, utteranceFragmentLinkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, utteranceDBTypes, false, strmangle.SetComplement(utterancePrimaryKeyColumns, utteranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, utteranceDBTypes, false, strmangle.SetComplement(utterancePrimaryKeyColumns, utteranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Utterance{&b, &c} {
		err = a.SetUtterance(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Utterance != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UtteranceFragmentLinks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UtteranceID, x.ID) {
			t.Error("foreign key was wrong value", a.UtteranceID)
		}

		if exists, err := UtteranceFragmentLinkExists(ctx, tx, a.UtteranceID, a.SequenceNo); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testUtteranceFragmentLinksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UtteranceFragmentLink{}
	if err = randomize.Struct(seed, o, utteranceFragmentLinkDBTypes, true, utteranceFragmentLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUtteranceFragmentLinksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UtteranceFragmentLink{}
	if err = randomize.Struct(seed, o, utteranceFragmentLinkDBTypes, true, utteranceFragmentLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UtteranceFragmentLinkSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUtteranceFragmentLinksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UtteranceFragmentLink{}
	if err = randomize.Struct(seed, o, utteranceFragmentLinkDBTypes, true, utteranceFragmentLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UtteranceFragmentLinks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	utteranceFragmentLinkDBTypes = map[string]string{`UtteranceID`: `BLOB`, `SequenceNo`: `INTEGER`, `UtteranceFragmentID`: `BLOB`, `CreatedAt`: `INTEGER`, `UpdatedAt`: `INTEGER`}
	_                            = bytes.MinRead
)

func testUtteranceFragmentLinksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(utteranceFragmentLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(utteranceFragmentLinkAllColumns) == len(utteranceFragmentLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UtteranceFragmentLink{}
	if err = randomize.Struct(seed, o, utteranceFragmentLinkDBTypes, true, utteranceFragmentLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UtteranceFragmentLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, utteranceFragmentLinkDBTypes, true, utteranceFragmentLinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUtteranceFragmentLinksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(utteranceFragmentLinkAllColumns) == len(utteranceFragmentLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UtteranceFragmentLink{}
	if err = randomize.Struct(seed, o, utteranceFragmentLinkDBTypes, true, utteranceFragmentLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UtteranceFragmentLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, utteranceFragmentLinkDBTypes, true, utteranceFragmentLinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(utteranceFragmentLinkAllColumns, utteranceFragmentLinkPrimaryKeyColumns) {
		fields = utteranceFragmentLinkAllColumns
	} else {
		fields = strmangle.SetComplement(
			utteranceFragmentLinkAllColumns,
			utteranceFragmentLinkPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UtteranceFragmentLinkSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUtteranceFragmentLinksUpsert(t *testing.T) {
	t.Parallel()
	if len(utteranceFragmentLinkAllColumns) == len(utteranceFragmentLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UtteranceFragmentLink{}
	if err = randomize.Struct(seed, &o, utteranceFragmentLinkDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UtteranceFragmentLink: %s", err)
	}

	count, err := UtteranceFragmentLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, utteranceFragmentLinkDBTypes, false, utteranceFragmentLinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UtteranceFragmentLink struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UtteranceFragmentLink: %s", err)
	}

	count, err = UtteranceFragmentLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
